In Nest.js, you can use the HttpStatus enum from the @nestjs/common module to represent HTTP status codes. This enum provides a convenient way to work with standard HTTP status codes in your Nest.js application. Here are some of the common HTTP status codes available in Nest.js:

HttpStatus.OK (200): Represents a successful HTTP request. Typically used for successful GET or PUT requests.

HttpStatus.CREATED (201): Indicates that a resource has been successfully created. Typically used for successful POST requests that create a new resource.

HttpStatus.NO_CONTENT (204): Indicates that the request has been successfully processed, and there is no response body. Often used for successful DELETE requests.

HttpStatus.BAD_REQUEST (400): Indicates a client error in the request. Typically used when the request is malformed or missing required data.

HttpStatus.UNAUTHORIZED (401): Indicates that the client is not authenticated. Used when authentication credentials are missing or invalid.

HttpStatus.FORBIDDEN (403): Indicates that the client does not have permission to access the requested resource. Typically used for authorization-related issues.

HttpStatus.NOT_FOUND (404): Indicates that the requested resource was not found on the server.

HttpStatus.CONFLICT (409): Indicates a conflict or a resource that cannot be modified due to a conflicting state.

HttpStatus.INTERNAL_SERVER_ERROR (500): Represents a generic server error. Used when an unexpected error occurs on the server.

HttpStatus.NOT_IMPLEMENTED (501): Indicates that the requested functionality is not implemented by the server.

HttpStatus.SERVICE_UNAVAILABLE (503): Indicates that the server is temporarily unavailable or unable to handle the request.

HttpStatus.GATEWAY_TIMEOUT (504): Indicates that a proxy or gateway has timed out while waiting for a response from an upstream server.

These are some of the most commonly used HTTP status codes in Nest.js, but there are many more available in the HttpStatus enum to cover various HTTP responses. You can use these status codes when sending responses in your Nest.js controllers to provide meaningful information to clients about the outcome of their requests.